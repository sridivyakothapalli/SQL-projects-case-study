
show databases;
use casestudy_sales;
select * from fact;
describe fact;
set autocommit=0;
commit;
select date_format("2013-12-13","%dd,%mm,%yyyy");
-- changing date data type
update fact
set Date=str_to_date(Date,"%d-%m-%Y");
alter table fact
modify  Date date;
delimiter $$
create procedure star()
begin
	select * from fact;
	select * from location;
	select * from product;
end $$
delimiter ;
call star();
-- 1. Display the number of states present in the Location
select distinct count(State) from location;
select State, count(State)from location
group by State;
-- 2. How many products are of regular type
select count(productid) from product
where type='regular';
-- 3. How much spending has been done on marketing of product ID 1?
select productid, sum(cogs) from fact
where productid=1
group by productid;

select productid, sum(cogs) from fact
group by productid
having productid=1;
-- 4. What is the minimum sales of a product
call star();
select min(sales) as minimum_Sales from fact;
-- 5. Display the max Cost of Good Sold (COGS)
select max(cogs) as maxcogs from fact;
-- 6. Display the details of the product where product type is coffe
select * ,`product type` from fact as f join product as p
on f.productid=p.productid 
where `product type`='coffee';
-- 7. Display the details where total expenses are greater than 40
select * from fact
where `total expenses` >40;
-- . What is the average sales in area code 719?
select avg(sales) from fact 
where `area code`=719;
-- Find out the total profit generated by Colorado state
select sum(profit) from fact f join location l 
on f.`area code`=l.`area code`
where state='colorado'
-- Display the average inventory for each product id
call star();
select productid,round(avg(inventory),2) from fact
group by productid;
-- Display state in a sequential order in a Location Table
select * from location
order by state desc;
-- Display the average budget of the Product where the average budget
-- margin should be greater than 100
select avg(`budget sales`) from fact
where `budget margin`>(select avg(`budget margin`) from fact);
-- What is the total sales done on date 2010-01-01
select date , sum(sales) from fact
where date ="2010-01-01"
group by date;
-- Display the average total expense of each product ID on an individual data
call star();
-- Display the table with the following attributes such as date, 
-- productID, product_type, product, sales, profit, state, area_code
select p.productid,date, `product type`, product, sales, profit, state,l. `area code` from product p join fact f 
on f.productid=p.productid
join location l
on f. `area code`=l. `area code`;
-- Display the rank without any gap to show the sales wise rank
select * ,rank() over (order by sales desc) as rank from fact;

-- rank state wise

select row_number() over(partition by state order by sales) as row_num,l.state, f.sales,rank() over(partition by state order by f.sales) as rnk 
from fact as f join location as l 
on f.`area code`=l.`area code`;

-- rank for each state
select  state, sum(sales),
rank() over(order by sum(sales)) as rnk 
from fact as f join location as l 
on f.`area code`=l.`area code`
group by state;

-- Find the state wise profit and sales
select state,`product type`,sum(profit),sum(sales) from fact f join location l
on f.`area code`=l.`area code`
join product p
on f.productid=p.productid
group by state,`product type`;
call star();
-- If there is an increase in sales of 5%, calculate the increased sales
select sales,
round(((sales*(5/100))+sales),2) 
as increased_Sales from fact;
-- Find the maximum profit along with the product ID and product type
select p.productid,`product type`,max(profit) max_profit
from fact f join product p
on f.productid=p.productid
group by productid,`product type`
order by productid;
-- Create a stored procedure to fetch the result according to the product type
-- from Product Table
delimiter $$
create procedure product_details(in p_product_type varchar(10))
begin 
	select * from product
    where `product type`=p_product_type;
end
$$
delimiter ;
drop procedure product_details;
call product_details('coffee');
-- Write a query by creating a condition in which if the total expenses is less than
-- 60 then it is a profit or else loss
select productid,`total expenses`,
case
	when `total expenses`>60 then "profit"
    else "loss"
end as profit_or_loss
 from fact;
 -- Give the total weekly sales value with the date and product ID details. Use
-- roll-up to pull the data in hierarchical order
select date,  week(date) from fact;
select productid,date,sales,
sum(sales) over(partition by year(date),month(date),week(date) order by date 
rows between unbounded preceding and current row) as wtd from fact;
-- Apply union and intersection operator on the tables which consist of
-- attribute area code
call star();
select * from location
intersect
select * from location;
-- Create a user-defined function for the product table to fetch a particular
-- product type based upon the userâ€™s preference

create function product_details(@producttype varchar(15)) returns  table
as
return
(select * from products
where `product type`=@producttype);
delimiter $$
create function add_five(num int)
returns int deterministic
begin
return num+5;
end $$
delimiter;
select add_five(100);






